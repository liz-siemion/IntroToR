[["import-export.html", "Chapter 7 Importing &amp; Exporting Data 7.1 csv files 7.2 xlsx files 7.3 Connect to a database on Windows OS 7.4 Load database files on a Macbook", " Chapter 7 Importing &amp; Exporting Data 7.1 csv files # Load csv file into R lion_crosstab &lt;- read.csv(&quot;path/to/your/file.csv&quot;) # Save it as a csv file write.csv(lion_crosstab, &quot;path/to/save/your_new_file.csv&quot;, row.names = FALSE) # row.names = FALSE makes sure a column of row numbers isn&#39;t created Exercise Load the lion crosstab table Use head() to examine the first 3 rows of the dataset. 7.2 xlsx files To read an xlsx file into R, we first need to install the readxl package. If the Excel file contains multiple sheets, you can specify the sheet you want to load by name or by index. install.packages(&quot;readxl&quot;) library(readxl) # read data data &lt;- read_excel(&quot;path/to/your/file.xlsx&quot;, sheet = &quot;Sheet1&quot;) # save data write.xlsx(data, &quot;path/to/save/your_new_file.xlsx&quot;, sheetName = &quot;Sheet1&quot;) Exercise 1. Load the lion crosstab xlsx table 2. Use head() to examine the first 3 rows of the dataset. 7.2.1 rds files An RDS file is a file format in R used to store a single R object, such as a data frame, vector, or model. It’s a convenient way to save your R work so you don’t lose data or have to recreate complex objects. You can use saveRDS() to save an object and readRDS() to load it back into your R session. RDS files preserve the exact data structure, including data types (e.g., factors, dates, lists, and complex objects), and metadata. # Load RDS file into R my_data &lt;- readRDS(&quot;path/to/your/file.RDS&quot;) # Save it as an RDS file saveRDS(my_data, &quot;path/to/save/your_new_file.RDS&quot;) # View the loaded data print(loaded_data) Exercise Load the lion RDS capture table Use head() to examine the first 3 rows of the dataset. Export capture table as an RDS file using a different name Export capture table as a csv file using a different name 7.3 Connect to a database on Windows OS To connect to a Microsoft Access database in R on a Windows computer, you can use the RODBC package. You will need the Access ODBC driver installed, and then use odbcDriverConnect() with the correct file path to the .mdb or .accdb file. Once connected, you can use sqlFetch() to load tables or sqlQuery() to run custom SQL queries. library(RODBC) # 1. Connect to the bighorn database conAV &lt;- RODBC::odbcDriverConnect(&quot;Driver={Microsoft Access Driver (*.mdb, *.accdb)}; DBQ=C:/R/MigrationEnergeticsModel/20181109_bighorn.mdb&quot;) # 2. Fetch desired database tables: grab database tables from bighorn database collar.data &lt;- RODBC::sqlFetch(conAV,&quot;AllCollarLocations&quot;, colnames=F, rownames=F) capt.data &lt;- RODBC::sqlFetch(conAV, &quot;BighornCapt&quot;, colnames=F, rownames=F) # 2. SQL Query for Custom Data Extraction: Write query using SQL syntax. This code can be grabbed from the access database if the query already exists. sql.qry_GPS_Parm &lt;- &quot;SELECT GPSParameters.ProgramName_Descrip, BigHornCapt.AnimalID, BigHornCapt.DateDt, BigHornCapt.GPSCollarSerialNo_Date_FK, LU_GPS_Programs.FixesPerWeek, BigHornCapt.Herd_Rels, BigHornCapt.Herd_Capt,BigHornCapt.Sex FROM LU_GPS_Programs INNER JOIN (GPSParameters INNER JOIN BigHornCapt ON GPSParameters.CollarSerialNo_Date = BigHornCapt.GPSCollarSerialNo_Date_FK) ON LU_GPS_Programs.ProgramName_Descrip = GPSParameters.ProgramName_Descrip WHERE ((LU_GPS_Programs.FixesPerWeek)&gt;27 And (LU_GPS_Programs.FixesPerWeek)&lt;250));&quot; # Execute query high.fix &lt;- RODBC::sqlQuery(conAV, sql.qry_GPS_Parm) # Remove query after run rm(sql.qry_GPS_Parm) # Close database connection close(conAV) 7.4 Load database files on a Macbook You can’t use Access databases on a Mac in the same way you can on a Windows machine. Microsoft Access .mdb and .accdb files aren’t natively supported on macOS because the required ODBC drivers are Windows-only. On my MacBook, I typically load individual tables using R and then join them within R, rather than querying directly through Access. (Note: we won’t cover joins in this class.) Another option is to convert the Access database into a SQL-compatible format (such as SQLite or PostgreSQL) and then write SQL queries against that database. # export Capture Table system(&quot;mdb-export /Users/a02399564/Documents/Research/PhD-SNBS/data/snbs/databases/bighorn.mdb BigHornCapt &gt; /Users/a02399564/Documents/Research/PhD-SNBS/data/snbs/databases/BigHornCaptTable.csv&quot;) EXERCISE Import the bighorn mortality table and store it in a data frame named bighorn_mort. Import the bighorn capture table and store it in a data frame named bighorn_capt. Combine the two tables using a tidyverse join command (sytax below) capt_mort &lt;- left_join(x = bighorn_capt, y = bighorn_mort, by = join_by(AnimalID == Animal_ID)) All bighorn are in bighorn_capt data frame, only some bighorn are in the bighorn_mort data frame (i.e. this will result in bighorn have NA’s if they are still alive) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
