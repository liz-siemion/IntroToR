[["tidyverse.html", "Chapter 6 Tidyverse 6.1 Why Tidyverse? 6.2 Main dplyr Functions 6.3 Tidyverse vs BaseR 6.4 ggplot", " Chapter 6 Tidyverse 6.1 Why Tidyverse? The tidyverse is a collection of R packages designed to simplify and streamline data science tasks. It promotes the concept of “tidy data,” where each column is a variable and each row is an observation, which simplifies analysis and visualization. Core tidyverse packages include ggplot2 for plotting, dplyr for data manipulation, and tidyr for reshaping data. library(tidyverse) ## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── ## ✔ dplyr 1.1.4 ✔ readr 2.1.5 ## ✔ forcats 1.0.0 ✔ stringr 1.5.1 ## ✔ ggplot2 3.5.1 ✔ tibble 3.2.1 ## ✔ lubridate 1.9.3 ✔ tidyr 1.3.1 ## ✔ purrr 1.0.2 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors Notice the Conflicts from loading the tidyverse package. One of the key strengths of the tidyverse is its readable syntax, especially with the use of the pipe operator (%&gt;%), which allows users to chain together multiple steps in a clear, logical order. # example of using a piped operation sheep &lt;- filter(x = sheep, herds %in% c(&quot;Bx&quot;, &quot;Cn&quot;)) %&gt;% mutate(Yr_Month = paste(Year, Month, sep = &quot;_&quot;)) Note that I had to specify the object (sheep) in the filter() function, but not in the mutate() function. The %&gt;% operator tells R to pass the sheep data frame through the pipeline, so it’s automatically used in the subsequent function. Learning tidyverse provides efficient tools and workflows for data cleaning, exploration, and analysis. One of the most commonly used packages within the tidyverse is dplyr (data plier), which provides a set of powerful and intuitive functions for manipulating data frames. With dplyr, you can easily filter rows, select columns, create new variables, group data, and summarize it—all using clear, readable code. Key Features: Consistent syntax across packages, making code easier to write and read. Tidy data structure, where each variable is a column and each observation is a row. Readable workflows using the pipe operator (%&gt;%) to chain commands clearly. Integrated tools for the entire data science process—importing, cleaning, transforming, visualizing, and modeling data. User-friendly functions with intuitive names and logical default argument values. Open-source and widely supported, with ample online learning resources Provides tools for data manipulation, exploration, and visualization. Uses piping (%&gt;%) to create readable, fluent workflows (through the magrittr package) 6.2 Main dplyr Functions dplyr, a main package of the tidyverse, consists of five main functions: filter(): Subset the data based on specific conditions. # create data frame object snbs &lt;- data.frame(AID = c(&quot;S488&quot;, &quot;S500&quot;, &quot;S468&quot;), Sex = c(&quot;M&quot;, &quot;F&quot;, &quot;F&quot;), Herd = c(&quot;Ca&quot;, &quot;Gb&quot;, &quot;Wh&quot;), RU = c(&quot;NRU&quot;, &quot;NRU&quot;, &quot;CRU&quot;)) # filter to females females &lt;- filter(snbs, Sex == &quot;F&quot;) females ## AID Sex Herd RU ## 1 S500 F Gb NRU ## 2 S468 F Wh CRU select(): Choose specific columns from the data. # select AID and RU columns snbs_s &lt;- select(snbs, AID, RU) # remove one column with negative indexing snbs_s &lt;- select(snbs, -Sex, -RU) mutate(): Modify or create new variables in the data. snbs_as &lt;- mutate(snbs, AID_Sex = paste(AID, Sex, sep = &quot;_&quot;)) %&gt;% select(AID, Sex, AID_Sex) head(snbs_as, 1) ## AID Sex AID_Sex ## 1 S488 M S488_M group_by(): Group data based on one or more variables for grouped operations. snbs_group &lt;- group_by(snbs, RU) snbs_group ## # A tibble: 3 × 4 ## # Groups: RU [2] ## AID Sex Herd RU ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 S488 M Ca NRU ## 2 S500 F Gb NRU ## 3 S468 F Wh CRU summarize(): Generate summary statistics from the data. Common summary statistics include: n(), mean(), mode(), range(), median(), sd(). snbs_summ &lt;- summarize(snbs_group, n = n()) snbs_summ ## # A tibble: 2 × 2 ## RU n ## &lt;chr&gt; &lt;int&gt; ## 1 CRU 1 ## 2 NRU 2 arrange(): Sort the data in a specific order. snbs_sorted &lt;- arrange(snbs, Herd) # Sorts character values in alphabetical order by default You can perform many operations in one call using the pipe operator: snbs_tidy &lt;- filter(snbs, Sex == &quot;F&quot;) %&gt;% mutate(AID_Sex = paste(AID, Sex, sep = &quot;_&quot;)) %&gt;% select(-RU) %&gt;% group_by(Herd) %&gt;% summarize(n = n()) %&gt;% arrange(Herd) EXERCISE 1 Recreate the following object: elk_df &lt;- data.frame( elk_id = c(\"E001\", \"E002\", \"E003\", \"E004\", \"E005\"), weight = c(350, 410, 290, 500, 375), herd = c(\"North\", \"South\", \"East\", \"West\", \"North\")) Use filter() to subset weights &gt; 375 Create a new data frame that only contains the elk_id and herd column Create a new data frame that is grouped by herd. Calculate the number of observations per herd. Arrange the final dataset in alphabetical order. 6.3 Tidyverse vs BaseR There are many different ways to accomplish the same task in R (e.g. using tidyverse or baseR syntax). Whichever syntax you choose depends on what you’re more comfortable with. Personally, I like using a mix of both. Tidyverse code is intuitive, but for really large data sets, baseR works faster. It’s all about finding what works best for you and your data. Purpose Tidyverse (dplyr) Base R Equivalent Subset rows filter() subset() or logical indexing: df[df$col == value, ] Select columns select() df[, c(\"col1\", \"col2\")] Create/modify columns mutate() df$new_col &lt;- ... Group data group_by() tapply(), aggregate(), or split() Summarize data summarize() (or summarise()) aggregate() or tapply() with mean(), sum(), etc. 6.4 ggplot ggplot is a powerful and flexible R package used for data visualization. It is part of the tidyverse and is built on the Grammar of Graphics—a layered approach to building plots that allows you to combine data, visual elements, and aesthetics step by step. You can customize nearly every part of a ggplot, including adding titles, axis labels, and legends; adjusting colors, shapes, and sizes; applying different themes; adding trend lines or annotations; and creating multi-panel layouts using faceting. Key Features Layered plotting system: Build plots by adding layers (e.g., points, lines, bars). Aesthetic mapping: Easily map variables to visual properties like color, size, and shape. Customizable: Control themes, labels, scales, and more. Works seamlessly with tidy data and other tidyverse tools. 6.4.1 Components of ggplot When using ggplot2 in R, your code is built in layers, with each part adding a new component to the plot. Here’s a breakdown of the key components you’ll commonly use: Data: The dataset you’re visualizing. Aesthetics (aes()): Defines how variables in the data are mapped to visual properties like position, color, or size. Geometries (geom_()): Determine the type of plot (e.g. points, lines, bars, etc.) Each ggplot() call begins with the data and aesthetic mappings, and layers like geom_() or theme_() are added using the + operator. Let’s go through the main parts step by step. First we will create a fake lion dataset: # Create fake lion data lions &lt;- data.frame( id = paste0(&quot;Lion&quot;, 200:219), age = sample(1:20, 20, replace = TRUE), # age in years weight = round(rnorm(20, mean = 60, sd = 10), 1), # weight in kg sex = sample(c(&quot;M&quot;, &quot;F&quot;), 20, replace = TRUE), region = sample(c(&quot;Northern&quot;, &quot;Southern&quot;, &quot;Central&quot;, &quot;Olancha&quot;), 20, replace = TRUE) ) head(lions, 3) ## id age weight sex region ## 1 Lion200 7 55.1 F Central ## 2 Lion201 19 44.8 M Central ## 3 Lion202 4 54.4 F Olancha The main ggplot() function ggplot(data = lions, aes(x = age, y = weight, color = sex)) ggplot(data = lions): This is where we tell ggplot what data we’re using. In this case, it’s the lions data frame. aes(x = age, y = weight, color = sex): This part is called the aesthetic mapping (or aes for short). It tells ggplot which variables to plot: x = age: We’re plotting age on the x-axis. y = weight: We’re plotting weight on the y-axis. color = sex: We want to color the points by the sex variable. This way, male and female lions will have different colors. Adding Points with geom_point() ggplot(data = lions, aes(x = age, y = weight, color = sex)) + geom_point(size = 3) * geom_point(): This part tells ggplot to plot the data as points (a scatter plot). * size = 3: This adjusts the size of the points on the plot to make them more visible. Adding a trendline and labels ggplot(data = lions, aes(x = age, y = weight, color = sex)) + # Add scatterplot geom_point(size = 3) + # Adding trend line geom_smooth(method = &quot;lm&quot;, se = FALSE, aes(color = sex), linetype = &quot;solid&quot;) + labs( title = &quot;Mountain Lion Weight by Age&quot;, x = &quot;Age (years)&quot;, y = &quot;Weight (kg)&quot;, color = &quot;Sex&quot; ) ## `geom_smooth()` using formula = &#39;y ~ x&#39; geom_smooth: creates a trendline for each sex labs(): This function is used to add titles and labels to the plot. title: Adds a title to the plot. x: Labels the x-axis (Age). y: Labels the y-axis (Weight). color: Adds a label for the color legend, which shows the different colors for male and female lions. Final Touches with theme_minimal() theme_minimal(): This is a simple and clean theme for the plot. It removes unnecessary background grids and makes the plot look more visually appealing. There are many other different themes such as theme_class, theme_dark, and theme_light. ggplot(data = lions, aes(x = age, y = weight, color = sex)) + # Add scatterplot geom_point(size = 3) + # Adding trend line geom_smooth(method = &quot;lm&quot;, se = FALSE, aes(color = sex), linetype = &quot;solid&quot;) + labs( title = &quot;Mountain Lion Weight by Age&quot;, x = &quot;Age (years)&quot;, y = &quot;Weight (kg)&quot;, color = &quot;Sex&quot; ) + theme_minimal() ## `geom_smooth()` using formula = &#39;y ~ x&#39; Here is an example of making a barplot that is colored by different region. # Create the bar plot, colored by region ggplot(data = lions, aes(x = region, fill = region)) + geom_bar(color = &quot;black&quot;) + # Bar border color labs( title = &quot;Number of Lions by Region&quot;, x = &quot;Region&quot;, y = &quot;Count of Lions&quot; ) + theme_minimal() + scale_fill_brewer(palette = &quot;Set3&quot;) # Using a color palette for better visuals 6.4.2 Different plots in ggplot Plot Type ggplot2 Function Description Scatter Plot geom_point() Shows relationship between two continuous variables Line Plot geom_line() Displays trends over time or ordered categories Bar Chart (counts) geom_bar() Plots the count of categories (x only) Bar Chart (values) geom_col() Plots values directly (requires both x and y) Boxplot geom_boxplot() Visualizes the distribution and spread by group Histogram geom_histogram() Shows distribution of a single continuous variable EXERCISE Create the following object: # Create a fake data frame for bighorn sheep bighorn_df &lt;- data.frame( ID = paste0(&quot;S&quot;, 500:530), # ID for each sheep Age = sample(1:15, 31, replace = TRUE), # Random ages between 1 and 10 Weight = round(rnorm(31, mean = 75, sd = 15), 1), # Random weights with mean of 75 kg and sd of 15 Sex = sample(c(&quot;M&quot;, &quot;F&quot;), 31, replace = TRUE), # Random sexes (Male, Female) Herd = sample(c(&quot;North&quot;, &quot;South&quot;, &quot;East&quot;, &quot;West&quot;), 31, replace = TRUE) # Random herd names ) Create a histogram to visualize the weights of bighorn sheep. Set the bins to be blue. Add a black outline to the bins. Include a title as well as labels for the x and y axes. Apply a theme to enhance the plot’s appearance. Create a similar baseR plot "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
